[{"kind":1,"language":"markdown","value":"## SAS Data Analysis","outputs":[]},{"kind":1,"language":"markdown","value":"We need to find bumblebees with names ending in \"ern,\" \"ed,\" or a charming hyphen. Our Queen Bee, a Southern belle with a flair for magnolias, believes these names hint at the finest nectar. Can you be on the lookout for maybe a Buzz-ern, Dappled-ed, or Polka-dotted bee to keep her hive the envy of the meadows!","outputs":[]},{"kind":1,"language":"markdown","value":"Perl regex (regular expressions) is a powerful tool for pattern matching and text manipulation, allowing complex searches, substitutions, and transformations within strings.","outputs":[]},{"kind":1,"language":"markdown","value":"Perl in SAS is used for advanced string manipulation and regular expression tasks, often through the PRX functions, allowing for more complex text processing than traditional SAS methods.","outputs":[]},{"kind":2,"language":"sas","value":"/*locate certain bee populations by name pattern*/\n/*regex -specificity, precision & density*/\n/*match \"ed\" or \"ern\" followed by a space (or boundary) or a dash*/\n\nproc print data=dst3(obs=10); \n    where prxmatch('/(ed|ern)(\\s|-)|\\-/i', commonname);\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Breakdown:\n\n(ed|ern) matches either \"ed\" or \"ern\".\n\n(\\s|-) ensures that the \"ed\" or \"ern\" is followed by either a space (\\s) or a hyphen (-).\n\n|\\- allows for matching any word that contains a hyphen, even if it doesn't end in \"ed\" or \"ern\".\n\nWith the /i at the end of the regex, it's case-insensitive, ensuring you capture both \"ed\" and \"ED\", \"ern\" and \"ERN\", etc.","outputs":[]},{"kind":2,"language":"sas","value":"/* Can the contains operator perform better? */\nproc print data=dst3(obs=10);\nwhere commonname contains 'ed' or commonname contains 'ern' or commonname contains '-';\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Breakdown:\n \nThis approach doesn't work because the CONTAINS operator matches substrings anywhere, without checking word boundaries or ensuring that \"ed\" or \"ern\" appear at the end of the word, leading to broad and imprecise matches (e.g., \"Red-backed\").","outputs":[]},{"kind":2,"language":"sas","value":"/* Certainly, the Like operator must perform better */\nproc print data=dst3(obs=10);\nwhere commonname like '%ed%' \n   or commonname like '%ern%' \n   or commonname contains '-';\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"The code doesn't work as expected because the LIKE and CONTAINS operators in SAS behave differently. LIKE matches substrings anywhere in the string (e.g., %ed% matches \"ed\" anywhere), while CONTAINS does the same but without checking specific positions. Combining them with OR leads to overly broad matches, such as any string containing a hyphen, which may not align with your pattern requirements.","outputs":[]},{"kind":1,"language":"markdown","value":"### Grouping Aggregate Data","outputs":[]},{"kind":1,"language":"markdown","value":"Buzzing Around: Mapping Bumblebee Hotspots!\nLet's track down where these fuzzy friends are hanging out the most. From hot & arid Arizona to the cool climes of Ontario, grab your data nets and letâ€™s discover the ultimate bee hangouts","outputs":[]},{"kind":1,"language":"markdown","value":"","outputs":[]},{"kind":2,"language":"sas","value":"title \"Count of Bees by Scientific Name and StateProvince\";\n\n/*Sort data by stateProvince and scientificName to prepare for grouped analysis*/\nproc sort data=dst1 out=sorted;\n    by stateProvince scientificName;\nrun;\n\n/*Count # of observations for each unique stateProvince and scientificName pair*/\nproc means data=sorted noprint nway;\n    class stateProvince scientificName;\n    output out=bee_counts (drop=_type_ _freq_)\n        n=Count;\nrun;\n\n/*Sort results by count (highest first), then by state and scientific name*/\nproc sort data=bee_counts;\n    by descending Count stateProvince scientificName;\nrun;\n\n/*Print the final table with a custom label for the count column*/\nproc print data=bee_counts label;\n    label Count = \"Number of Bees\";\nrun;","outputs":[]}]